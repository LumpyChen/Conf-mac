---
layout: page
title:  "源码，反码和补码"
date:   2016-03-08 19:07:05
category:   college_courses
tags:   
    -  computer_science
---

# 源码，反码和补码

上课的时候没有捣明白，课下梳理了一下。

首先明确点概念：

源码：使用第一位表示符号, 其余位表示数字二进制的大小 —— `符号数值表示法`

反码：对于正数来说，和源码相等；对于负数来说，是相应整数的源码，符号位不变，其余位相对取反

补码：对于正数来说，和源码相等；对于负数来说，是相应整数源码的反码加一

正数的这三种编码方式的结果都相同。

通过这三个定义，就可以轻松求出源码的反码和补码。

对于计算机，
辨别`符号位`显然需要复杂的电路设计， 
于是人们想出了将符号位也参与运算的方法：

>减去一个正数等于加上一个负数。

于是有了反码：

$ 8 - 16 = 8 + (-16) = (0000 1000)_源 + (1001 0000)_源 $
$ = (0000 1000)_反 + (1110 1111)_反 = (1111 0111)_反 = (1000 1000)_源 = -8 $

但是在得到`0`时：

$ 1 - 1 = 1 + (-1) = (0000 0001)_源 + (1000 0001)_源$
$= (0000 0001)_反 + (1111 1110)_反 = (1111 1111)_反 = (1000 0000)_源 = -0 $

由于`-0`没有意义，所以浪费了一个空间。

于是出现了补码：

$ 1 - 1 = 1 + (-1) = (0000 0001)_原 + (1000 0001)_原 = (0000 0001)_补 + (1111 1111)_补 = (0000 0000)_补 = (0000 0000)_原 $

8位的情况下，可以用`1000 0000`表示`-128`

*   修复了0的符号以及存在两个编码的问题
*   多表示一个最低数

这就是为什么8位二进制, 使用原码或反码表示的范围为$[-127, +127]$,
而使用补码表示的范围为$[-128, 127]$。

因为机器使用补码, 所以对于编程中常用到的`32`位`int`类型, 
可以表示范围是:$[-2^{31}, 2^{31}-1]$
第一位表示的是符号位，而使用补码表示时又可以多保存一个最小值。















